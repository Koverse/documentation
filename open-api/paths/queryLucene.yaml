get:
  summary: Lucene Syntax
  operationId: queryLucene
  tags: ["Query"]
  description: |
        This method is useful for apps that want to allow users to create
        their own queries using Lucene syntax. Queries can be issued for one
        or more data sets simultaneously via the dataSets parameter.

        ### Lucene syntax supported

        Searching for records that contain a term in any field:

        `mary`

        To search for terms that contain spaces, use quotes around the terms:

        `"mary had a"`

        Searching for records that contain a term in a particular field,
        for example, to find records with the term ‘mary’ in the ‘name’ field:

        `name: mary`

        ### Combining Terms

        Searching for records that contain a term in one field and another
        term in another field. This is like requesting records that match
        the first clause, AND the second:

        `name: mary occupation: shepherd`

        Two or more terms may be combined this way. Some terms can be field
        specific and others not. For example:

        `name: mary shepherd`

        would return any records where the value “mary” appeared in the
        name field, and where the value “shepherd” appeared in any other
        field, including the name field.

        Note that the difference between querying for a two-word phrase with
        containing a space and searching for one word within a field and
        one word in any field requires quotes. To search for a two-word
        phrase within a single field, use quotes around the two-word phrase:

        `name: "jane doe" shepherd`

        The preceding query would search for the entire string “jane doe”
        in the name field and the word “shepherd” in any field.

        ### Searching Ranges

        To search for records that contain a value within a range, use
        square brackets and word ‘TO’:

        `height: [60 TO 70]`

        For an open-ended search, use an asterisk, * , to indicate positive
        or negative infinity. The following means return records with a
        value for the height field that is greater than or equal to 60:

        `height: [60 TO *]`

        The following returns all records with a value in the height field
        less than or equal to 60:

        `height: [* TO 60]`

        Searches can also be done across ranges of text values using
        wildcard syntax. Only trailing wildcards are supported. The
        following returns records with a value beginning with the letters
        ‘ma’ in any field:

        `ma*`

        Koverse understands the ordering of several types of values
        including numbers, text strings, dates, and IP addresses:

        `[192.168.1.0 TO 192.168.34.0]`

        To query a range of dates, the following formats are recognized:

        * "yyyyMMdd hh:mm:ss"
        * "EEE MMM d HH:mm:ss Z yyyy"
        * "EEE MMM d HH:mm:ss zzz yyyy"
        * "yyyy-MM-dd"
        * "yyyy-MM"
        * "yyyy/MM/dd HH:mm:ss"
        * "yyyy/MM/dd HH:mm:ss.SSS"
        * "MM/dd/yyyy HH:mm"
        * "ddHHmm'Z' MMM yy"

        Date syntax

        * yyyy - four digit year
        * yy - two digit year
        * MM - two digit month
        * MMM - three letter month
        * dd - two digit day
        * d - one or two digit day
        * HH - two digit hour
        * mm - two digit minute
        * ss - two digit second
        * Z - time zone. such as -0800
        * zzz - time zone. such as Pacific Standard Time; PST; GMT-08:00

        An example of a query for a date range is:

        `creation_date: ["20140211 11:28:08" TO "20140211 13:30:08"]`

        Another example date range is:

        `["2014-02-11" TO "2014-02-12"]`

        Note that a date format such as “20140211” is indistinguishable
        from a simple number, so dashes should be used if a date is meant.

        Searching for records that contain a geographical point value:

        `coordinate: [-60,-40 TO 30,35]`

        Searching a single range does not require that a composite index be
        built. To query multiple ranges at once or a range and other terms,
        a composite index must be built. These types of queries are
        described in the following section.

        For additional information on Composite Indexes, please refer to
        Indexing Policy and Composite Indexes

        ### Combining Ranges

        Koverse supports querying for multiple ranges or ranges and single
        terms simultaneously but requires that composite indexes be built
        first before such queries can be executed. This is because
        composite indexes reduce the work done at query time to just a few
        short scans without having to do any set operations so queries with
        multiple ranges can return quickly, without impacting other users
        of the system.

        An example of a query that combines a range with a single term. To
        perform this query, a composite index of the height and name field
        is required. See Indexing Policy and Composite Indexes for how to
        build this type of index:

        `height: [* TO 10] name: mary`

        An example of a query that combines multiple ranges. To perform
        this query, a composite index of the height and weight field is
        required:

        `height: [* TO 10] weight: [70 TO 80]`

        To query across a range of geos and time simultaneously, do the
        following. To perform this query, a composite index on the geo
        field and time field is required:

        `geo: [-60,-40 TO 30,35] time: ["20140211 11:28:08" TO "20140211 13:30:08"]`

  parameters:
    - in: query
      name: query
      type: string
      required: true
      description: >
            Lucene syntax query string. See above description for details on syntax.
      # externalDocs:
      #   url: http://koverse.readthedocs.io/en/2.3/usageguide.html#search-syntax
      #   description: Details on the Lucene syntax supported.
    - in: query
      name: dataSets
      type: string
      required: true
      description: >
          A comma separated list of dataSetIds. Specifying a blank string will
          cause the query to be issued to all data sets the user is allowed
          to query.
    - in: query
      name: auths
      type: string
      required: false
      description: >
          An optional comma separated list of authorization tokens. These are
          used for applying record-level filtering of data set results to
          records that have additional security labels applied.
    - in: query
      name: numRecords
      type: integer
      format: int32
      required: false
      description: >
          The number of records to include in the response.
    - in: query
      name: recordOffset
      type: integer
      format: int64
      required: false
      description: >
          The number of records in the query response to skip. This is used to
          implement paging in applications.
    - in: query
      name: fieldsToReturn
      type: string
      required: false
      description: >
        A comma separated list of field names which can be used to restrict the
        fields included in the response records returned.
  responses:
    200:
      description: Query results
      schema:
        type: array
        items:
          $ref: "../api.yaml#/definitions/dataSetResult"
