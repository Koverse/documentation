swagger: '2.0'
info:
  version: 2.4.0
  title: Koverse REST API
  description: |
    Specification for interacting with the Koverse Rest API
host: demo.koverse.com
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: Authentication
    description: Manage User Authentication
  - name: Data Sets
    description: Manage Data Sets
  - name: Import Flows
    description: Manage Import Flows
  - name: Indexing
    description: Manage Indexing
  - name: Jobs
    description: Manage Jobs
  - name: Masking
    description: Manage Column Masking
  - name: Normalizations
    description: Manage Normalizations
  - name: Permissions
    description: Manage Permissions
  - name: Query
    description: Query Data Sets
  - name: Records
    description: Manage Records
  - name: Schedules
    description: 'Manage Schedules for Sinks, Transforms, and Import Flows'
  - name: Sinks
    description: Manage Sinks
  - name: Sources
    description: Manage Sources
  - name: System
    description: System Information
  - name: Transforms
    description: Manage Transforms
definitions:
  dataSet:
    type: object
    required:
      - name
    properties:
      id:
        type: string
      name:
        type: string
        minLength: 4
        pattern: '^[a-zA-Z0-9- ]+$'
        example: Movies
      description:
        type: string
        example: List of Movies
      importFlowIds:
        type: array
        items:
          type: integer
        example:
          - 338
      createdTimestamp:
        type: integer
      updatedTimestamp:
        type: integer
  dataSetAttributes:
    type: object
    required:
      - name
    properties:
      id:
        type: string
        example: actor_1_name
      dataSetId:
        type: string
        example: movies_20171107_172745_048
      name:
        type: string
        example: actor_1_name
      presenceCount:
        type: integer
        example: 4155
      uniqueValueCount:
        type: integer
        example: 3982
      valueCount:
        type: integer
        example: 4155
      visualizationType:
        $ref: '#/definitions/visualizationType'
      types:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            displayName:
              type: string
            prevalence:
              type: number
      values:
        type: array
        items:
          type: object
          properties:
            occurrences:
              type: integer
            value:
              type: string
            coordinates:
              type: object
              properties:
                lat:
                  type: number
                long:
                  type: number
            countryId:
              type: string
            opacity:
              type: integer
      indexed:
        type: boolean
      masked:
        type: boolean
      maskers:
        type: array
        items:
          type: object
  dataSetAttributeUpdateList:
    type: object
    required:
      - attrs
    properties:
      attrs:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            indexed:
              type: boolean
            maskers:
              type: array
              items:
                type: object
                properties:
                  descriptionId:
                    type: string
                  exceptedGroupIds:
                    type: array
                    items:
                      type: integer
                  parameters:
                    type: object
                    properties:
                      setting:
                        type: string
  dataSetIndexingPolicy:
    type: object
    required:
      - id
      - dataSetId
      - fieldsInclusive
      - fields
      - compositeIndexes
      - createValueOnlyIndices
    properties:
      id:
        type: integer
        format: int64
        example: 1
      dataSetId:
        type: string
        example: movies_20171107_172745_048
      fieldsInclusive:
        type: boolean
        description: >-
          If true, specifies the fields to include. If false, specifies the
          fields to exclude
        example: true
      fields:
        type: array
        items:
          type: string
        description: The field names to either include or exclude
        example:
          - actor_1_name
      compositeIndexes:
        type: array
        items:
          type: array
          items:
            $ref: '#/definitions/fieldTypePair'
      createValueOnlyIndices:
        type: boolean
        example: true
  dataSetJob:
    type: object
    required:
      - id
      - dataSetId
    properties:
      id:
        type: string
      dataSetId:
        type: string
      createdAt:
        type: integer
      startedAt:
        type: integer
      endedAt:
        type: integer
      error:
        type: string
      origin:
        type: string
      progress:
        type: number
      type:
        type: string
    example:
      id: 720
      userId: 4
      creationDate: 1537394536892
      startedDate: 1537394546221
      endedDate: 1537394584108
      status: success
      errorDetail: null
      statusMessage: null
      userAcknowledged: false
      origin: UNSPECIFIED
      overrideBlockedStatus: false
      progress: 1
      type: REINDEXING
      dataSetId: movie_metadata_clean_20180817_180504_927
      errors: []
      outputDataSetId: null
      inputDataSetIds: null
      recordCount: 0
  dataSetMetadata:
    type: object
    description: |
      This object contains all the metadata associated with a data set.
    required:
      - name
    properties:
      id:
        type: string
      name:
        type: string
        minLength: 4
        pattern: '^[a-zA-Z0-9- ]+$'
      description:
        type: string
        description: A user-readable description of the data set.
      deleted:
        type: boolean
      groupPermissionsIds:
        type: array
      indexingPolicyId:
        type: integer
      indexingPolicy:
        type: string
      tags:
        type: string
      userId:
        type: integer
      useId:
        type: integer
        description: The user ID of the creator of this data set.
      createdTimestamp:
        type: integer
        description: Timestamp of when the data set was created.
      updatedTimestamp:
        type: integer
        description: Timestamp of the last time records were added.
      recordCountLastUpdate:
        type: integer
        description: Timestamp of the last time records were added.
      recordCount:
        type: integer
      sizeBytes:
        type: integer
      disableFieldStats:
        type: boolean
      disableSampling:
        type: boolean
      status:
        type: string
      hadoopDeleteJobIds:
        type: array
      dataStoreAuthRemoved:
        type: boolean
      version:
        type: integer
      importFlowId:
        type: string
      importFlowIds:
        type: array
        items:
          type: integer
        description: A list of IDs of import flows writing data to this data set.
      ageOffEnabled:
        type: boolean
      ageOffIndexDays:
        type: integer
      fieldStatsMinimumExecutionPeriod:
        type: integer
      samplingMinimumExecutionPeriod:
        type: integer
      aggregationMinimumExecutionPeriod:
        type: integer
      schemaMinimumExecutionPeriod:
        type: integer
      indexMinimumExecutionPeriod:
        type: integer
    example:
      id: movies_20171107_172745_048
      name: Movies
      description: List of Movies
      userId: 4
      createdTimestamp: 1510093665050
      updatedTimestamp: 1510093711178
      recordCountLastUpdated: 1510106324522
      recordCount: 4159
      importFlowIds:
        - 338
  dataSetPermission:
    type: object
    required:
      - groupId
      - dataSetId
    properties:
      id:
        type: string
      groupId:
        type: string
      dataSetId:
        type: string
      all:
        type: boolean
      read:
        type: boolean
      download:
        type: boolean
      write:
        type: boolean
      delete:
        type: boolean
      managePermissions:
        type: boolean
      manageConfiguration:
        type: boolean
      audit:
        type: boolean
      permissionsTypes:
        type: array
    example:
      id: 844
      dataSetId: movies_20171107_172745_048
      groupId: 1
      all: false
      read: false
      download: false
      write: false
      delete: false
      managePermissions: false
      manageConfiguration: false
      audit: false
      authorizerTypeId: null
      authorizerGroupId: null
      permissionsTypes: []
  dataSetResult:
    type: object
    description: >
      This object contains all the records matching a query against a single
      data set.
    properties:
      id:
        type: string
      name:
        type: string
      attributeMatchCount:
        type: integer
        format: int64
        description: Not used
      recordMatchCount:
        type: integer
        format: int64
        description: >
          The total number of records matching this query. It's possible for
          there to be more results than can be retreived in one call. In this
          case, more results can be fetched with subsequent calls that use the
          recordOffset parameter to get subsequent pages of results.
      recordCount:
        type: integer
        format: int64
        description: |
          The total number of records in this data set.
      createdTimestamp:
        type: integer
        format: int64
      updatedTimestamp:
        type: integer
        format: int64
      flatSchema:
        type: boolean
        description: >
          Whether records in this result set contain no nested values like
          arrays or maps
      recordMatchCountLimited:
        type: boolean
        description: >
          The backend only counts record matches up to 5000. If there are more
          results than this recordMatchCountLimited is true.
      records:
        type: array
        items:
          $ref: '#/definitions/record'
      successful:
        type: boolean
      errorMessage:
        type: string
    example:
      id: movies_20171107_172745_048
      name: movies
      attributeMatchCount: 0
      recordMatchCount: 20
      recordCount: 4159
      createdTimestamp: 1510093665050
      updatedTimestamp: 0
      flatSchema: true
      recordMatchCountLimited: false
      records:
        - $ref: '#/definitions/record/example'
      successful: true
      errorMessage: ''
  dataSetSchemas:
    type: object
    description: |
      Array of metadata of the schema of a dataset.
    required:
      - type
      - fieldTypeCounts
    properties:
      type:
        type: string
        example: SCALAR
      fieldTypeCounts:
        type: array
      fieldValueType:
        type: string
        example: DATE
  exportSchedule:
    type: object
    properties:
      sinkId:
        type: integer
        format: int64
      sinkDisplayName:
        type: string
  fieldTypePair:
    type: object
    required:
      - fieldName
      - fieldType
    properties:
      fieldName:
        type: string
      fieldType:
        type: boolean
  importFlow:
    type: object
    required:
      - sourceInstanceId
    properties:
      id:
        type: integer
        format: int64
      sourceInstanceId:
        type: integer
        format: int64
      dataSetId:
        type: string
      disabled:
        type: boolean
      type:
        type: string
        enum:
          - manual
          - continuous
          - periodic
      updatedAt:
        type: string
        format: dateTime
      executedAt:
        type: string
        format: dateTime
      executionCount:
        type: integer
      normalizations:
        type: array
        items:
          type: object
          properties:
            config:
              type: object
            typeId:
              type: string
      configurationOptions:
        type: object
    example:
      id: 50596
      responsibleUserId: 1
      disabled: false
      type: manual
      creationDate: 1534541944533
      lastUpdatedDate: 1534541944533
      lastExecutionDate: 1534529105371
      disabledDate: null
      executionCount: 1
      normalizations: []
      schedules: []
      configurationOptions: {}
      ingestState: {}
      sourceInstanceId: 50594
      outputDataSetId: movies_20171107_172745_048
  importSchedule:
    type: object
    required:
      - importFlowId
      - repeatUnit
      - repeatInterval
      - endingType
    properties:
      id:
        type: integer
        format: int64
      importFlowId:
        type: integer
        format: int64
      repeatInterval:
        type: integer
        format: int32
      repeatUnit:
        type: string
        enum:
          - Hourly
          - Daily
          - Weekly
          - Monthly
      endingType:
        type: string
        enum:
          - Never
          - Date
          - Count
      startDateTime:
        type: string
        format: dateTime
      endDateTime:
        type: string
        format: dateTime
      endAfter:
        type: integer
        format: int64
  job:
    type: object
    required:
      - id
      - dataSetId
    properties:
      id:
        type: string
        example: 67760
      userId:
        type: integer
        example: 1
      dataSetId:
        type: string
        example: movies_20171107_172745_048
      status:
        type: string
        example: running
      creationDate:
        type: integer
        example: 1539982556061
      startedDate:
        type: integer
        example: 1539982559008
      endedAt:
        type: integer
        example: 0
      error:
        type: string
      origin:
        type: string
        example: USER_REQUEST
      progress:
        type: number
      type:
        type: string
  login:
    type: object
    description: |
      This object contains the parameters necessary to authenticate.
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string
    example:
      email: zerocool@example.com
      password: supersecret
  logout:
    type: boolean
    example: true
    description: |
      This indicates whether the logout was successful.
  normalization:
    type: object
    required:
      - importFlowId
      - typeId
      - position
      - enabled
    properties:
      id:
        type: integer
      importFlowId:
        type: integer
      typeId:
        type: string
      position:
        type: integer
      enabled:
        type: boolean
      config:
        type: object
  normalizationType:
    type: object
    required:
      - displayName
      - typeId
    properties:
      typeId:
        type: string
      displayName:
        type: string
      description:
        type: string
      implementationClassName:
        type: string
      parameters:
        type: array
  parameter:
    type: object
    required:
      - displayName
      - parameterName
      - type
      - required
    properties:
      id:
        type: integer
        format: int64
      displayName:
        type: string
      parameterName:
        type: string
      type:
        type: string
        enum:
          - string
          - text
          - boolean
          - integer
          - enum
          - file
          - inputCollection
          - outputCollection
          - securityLabelParser
          - collectionField
          - collectionMultipleField
          - exportSingleOutput
      enumerations:
        type: array
        items:
          type: string
      defaultValue:
        type: string
      required:
        type: boolean
      hint:
        type: string
      javascriptClassName:
        type: string
      addOnId:
        type: integer
        format: int64
      parameterGroup:
        type: string
  record:
    type: object
    properties:
      recordId:
        type: string
      collectionId:
        type: string
      securityLabel:
        type: string
      value:
        type: object
        description: >
          An object containing the fields and values within this record. The
          structure of this object will vary from data set to data set. Here we
          include 'fieldOne', 'fieldTwo', etc. just as an example.
    example:
      recordId: null
      collectionId: movies_20171107_172745_048
      securityLabel: ''
      value:
        plot_keywords: african american|code|dog|pigeon|samurai
        country: France
        aspect_ratio: 1.85
        actor_3_facebook_likes: 116
        num_critic_for_reviews: 167
        color: Color
        language: English
        title_year: 1999
        imdb_score: 7.5
        duration: 116
        genres: Action|Crime|Drama|Thriller
        actor_1_name: Henry Silva
        director_facebook_likes: 0
        content_rating: R
        num_voted_users: 70084
        gross: 3300230
        facenumber_in_poster: 1
        actor_2_name: Gano Grills
        num_user_for_reviews: 346
        actor_1_facebook_likes: 251
        movie_title: Ghost Dog - The Way of the Samurai
        movie_facebook_likes: 0
        actor_2_facebook_likes: 147
        movie_imdb_link: 'http://www.imdb.com/title/tt0165798/?ref_=fn_tt_tt_1'
        director_name: Jim Jarmusch
        cast_total_facebook_likes: 675
        actor_3_name: Richard Portnow
      matchValues: null
      isMatch: false
  sink:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      configurationOptions:
        type: object
      disabled:
        type: boolean
      sinkTypeId:
        type: string
      scheduleType:
        type: string
      responsibleUser:
        $ref: '#/definitions/user'
      transforms:
        type: array
        items:
          $ref: '#/definitions/sinkTransformConfiguration'
      inputDataWindowType:
        type: string
      dataSetId:
        type: string
  sinkType:
    type: object
    required:
      - name
    properties:
      typeId:
        type: string
      name:
        type: string
      parameters:
        type: array
  sinkTypeDescription:
    type: object
    required:
      - name
      - implementationClassName
      - sinkTypeId
      - sinkParameters
      - disabled
      - version
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      implementationClassName:
        type: string
      sinkTypeId:
        type: string
      sinkParameters:
        type: array
        items:
          $ref: '#/definitions/parameter'
      disabled:
        type: boolean
      version:
        type: string
  sinkTransformConfiguration:
    type: object
    properties:
      typeId:
        type: string
      implementationClassName:
        type: string
      config:
        type: object
  source:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      importFlowId:
        type: string
      sourceTypeId:
        type: string
      configurationOptions:
        type: object
      disabled:
        type: boolean
      isSchedulable:
        type: boolean
      clearOutputDataSet:
        type: boolean
  sourceInstance:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      importFlowId:
        type: string
      sourceTypeId:
        type: string
      configurationOptions:
        type: object
      disabled:
        type: boolean
      isSchedulable:
        type: boolean
      clearOutputDataSet:
        type: boolean
  sourceTypeDescription:
    type: object
    required:
      - name
    properties:
      id:
        type: string
      name:
        type: string
      version:
        type: string
      implementationClassName:
        type: string
      sourceTypeId:
        type: string
      customParameterFromJavascriptPath:
        type: string
      parameters:
        type: array
      flowParameters:
        type: array
      disabled:
        type: boolean
      executionMethod:
        type: string
      addonId:
        type: string
  success:
    type: object
    required:
      - success
    properties:
      success:
        type: boolean
      successMessage:
        type: string
  transform:
    type: object
    required:
      - transformTypeId
      - configurationOptions
    properties:
      id:
        type: string
      displayName:
        type: string
      configurationOptions:
        type: object
      transformTypeId:
        type: string
      scheduleType:
        type: string
      inputDataSetIds:
        type: array
      outputDataSetId:
        type: string
      replaceOutputData:
        type: boolean
      inputDataWindowType:
        type: string
  transformSchedule:
    type: object
    required:
      - transformId
      - repeatUnit
      - repeatInterval
      - endingType
    properties:
      id:
        type: integer
        format: int64
      transformId:
        type: integer
        format: int64
      repeatInterval:
        type: integer
        format: int32
      repeatUnit:
        type: string
        enum:
          - Hourly
          - Daily
          - Weekly
          - Monthly
      endingType:
        type: string
        enum:
          - Never
          - Date
          - Count
      startDateTime:
        type: string
        format: dateTime
      endDateTime:
        type: string
        format: dateTime
      endAfter:
        type: integer
        format: int64
  transformType:
    type: object
    required:
      - name
    properties:
      typeId:
        type: string
      name:
        type: string
      parameters:
        type: array
  searchAutocomplete:
    type: object
    required:
      - type
      - value
    properties:
      type:
        type: string
      value:
        type: string
      dataSetId:
        type: string
      labelId:
        type: string
  user:
    type: object
    required:
      - firstName
      - lastName
      - email
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
        description: username or email used to login
    example:
      id: 1
      firstName: Dade
      lastName: Murphy
      email: zerocool@example.com
  visualizationType:
    type: string
    enum:
      - line
      - bar
      - pie
      - chloropleth-countries
      - heatmap
      - list
      - single-value
parameters:
  dataSet:
    name: dataSet
    in: body
    description: Dataset attributes
    required: true
    schema:
      $ref: '#/definitions/dataSet'
  dataSetAttributeUpdateList:
    name: dataSetAttributeUpdateList
    in: body
    description: Attribute update list for masking attributes
    required: true
    schema:
      $ref: '#/definitions/dataSetAttributeUpdateList'
  dataSetId:
    name: dataSetId
    in: path
    description: ID of the data set
    required: true
    type: string
  dataSetMetadata:
    name: dataSetMetadata
    in: body
    description: Metadata of a dataset
    required: true
    schema:
      $ref: '#/definitions/dataSetMetadata'
  exportJobId:
    name: exportJobId
    in: path
    description: ID of the export job
    required: true
    type: string
  exportScheduleId:
    name: exportScheduleId
    in: path
    description: ID of an export schedule
    required: true
    type: string
  fileType:
    name: fileType
    in: path
    description: fileType to download
    required: true
    type: string
    enum:
      - json
      - csv
  importFlowId:
    name: importFlowId
    in: query
    description: ID of the import flow
    required: true
    type: string
  importFlowIdPath:
    name: importFlowId
    in: path
    description: ID of the import flow
    required: true
    type: string
  importJobId:
    name: importJobId
    in: path
    description: ID of the import job
    required: true
    type: integer
    format: int64
  importScheduleId:
    name: importScheduleId
    in: path
    description: ID of the import schedule
    required: true
    type: string
  jobId:
    name: jobId
    in: path
    description: ID of the job
    required: true
    type: string
  normalizationId:
    name: normalizationId
    in: path
    description: ID of the normalization
    required: true
    type: string
  objectQuery:
    name: query
    in: body
    required: true
    schema:
      type: object
      required:
        - query
      description: >
        This object contains the parameters used to issue a query against one or
        more data sets. The query is defined as a JSON string
      properties:
        collectionIds:
          type: array
          items:
            type: string
          description: >
            A list of data set IDs. Specifying an empty list will cause the
            query to be issued to all data sets the user is allowed to query.
        query:
          type: string
          description: >
            A query represented as a JSON string


            ### Examples


            Search for a value in any field


            `{$any: fmv}`


            Search for a value in a specific field


            `{field.name: fmv}`


            Combine criteria usin AND


            `{$and: [{$any: fmv}, {$any: blue}]}`


            Combine criteria using OR


            `{$or: [{$any: fmv}, {$any: blue}]}`


            ### Range Queries


            A value in any field greater than or equal to 160


            `{$any: {$gte:160}}`


            Date field less than a specific date


            `{date_created: {$lt: “1980-01-01T00:00:00.000Z}}`


            Geo Range


            `{fieldName: {$box: [[sw-lat, sw-long],[ne-lat, ne-long]]}}`


            E.g. `{fieldName: {$box :[[39.5, -104.9],[40, -104.5]]}}`


            Note that queries that combine a range with any other criteria, and

            queries that combine multiple ranges require Composite Indexes on

            the fields involved. See

            [additional
            docs](http://koverse.readthedocs.io/en/2.3/dev/dataset.html#compositeindexes)

            for information on building these.
        auths:
          type: array
          items:
            type: string
          description: >
            An optional comma separated list of authorization tokens. These are
            used for applying record-level filtering of data set results to
            records that have additional security labels applied.
        fieldsToReturn:
          type: array
          items:
            type: string
          description: >
            The list of field names to include in records. Other fields will be
            excluded. Omitting this parameter will cause all fields to be
            included in records.
        limit:
          type: integer
          description: The number of results to fetch in this call
        offset:
          type: integer
          description: The number of records in the result set to skip
      example:
        collectionIds:
          - movies_20171107_172745_048
        query:
          title: jurassic
        fieldsToReturn:
          - movie_title
          - title_year
          - gross
        limit: 100
  objectQueryNames:
    name: query
    in: body
    required: true
    schema:
      type: object
      required:
        - query
      description: >
        This object contains the parameters used to issue a query against one or
        more data sets. The query is defined as a JSON string
      properties:
        collectionNames:
          type: array
          items:
            type: string
          description: >
            A list of data set names. Specifying an empty list will cause the
            query to be issued to all data sets the user is allowed to query.
        query:
          type: string
          description: >
            A query represented as a JSON string


            ### Examples


            Search for a value in any field


            `{$any: fmv}`


            Search for a value in a specific field


            `{field.name: fmv}`


            Combine criteria usin AND


            `{$and: [{$any: fmv}, {$any: blue}]}`


            Combine criteria using OR


            `{$or: [{$any: fmv}, {$any: blue}]}`


            ### Range Queries


            A value in any field greater than or equal to 160


            `{$any: {$gte:160}}`


            Date field less than a specific date


            `{date_created: {$lt: “1980-01-01T00:00:00.000Z}}`


            Geo Range


            `{fieldName: {$box: [[sw-lat, sw-long],[ne-lat, ne-long]]}}`


            E.g. `{fieldName: {$box :[[39.5, -104.9],[40, -104.5]]}}`


            Note that queries that combine a range with any other criteria, and

            queries that combine multiple ranges require Composite Indexes on

            the fields involved. See

            [additional
            docs](http://koverse.readthedocs.io/en/2.3/dev/dataset.html#compositeindexes)

            for information on building these.
        auths:
          type: array
          items:
            type: string
          description: >
            An optional comma separated list of authorization tokens. These are
            used for applying record-level filtering of data set results to
            records that have additional security labels applied.
        fieldsToReturn:
          type: array
          items:
            type: string
          description: >
            The list of field names to include in records. Other fields will be
            excluded. Omitting this parameter will cause all fields to be
            included in records.
        limit:
          type: integer
          description: The number of results to fetch in this call
        offset:
          type: integer
          description: The number of records in the result set to skip
      example:
        collectionNames:
          - movies
        query:
          title: jurassic
        fieldsToReturn:
          - movie_title
          - title_year
          - gross
        limit: 100
  permissionId:
    name: permissionId
    in: path
    description: ID of the permission
    required: true
    type: string
  recordId:
    name: recordId
    in: query
    description: ID of the record
    required: true
    type: string
  recordStyle:
    name: recordStyle
    in: query
    description: |
      Requests a more efficient representation of records
    required: false
    type: string
    enum:
      - 2.2
  sink:
    name: sink
    in: body
    required: true
    schema:
      $ref: '#/definitions/sink'
  sinkId:
    name: sinkId
    in: path
    description: ID of the sink
    type: integer
    required: true
  sinkTypeId:
    name: sinkTypeId
    in: path
    description: ID of the sink type
    required: true
    type: integer
    format: int64
  sourceId:
    name: sourceId
    in: path
    description: ID of the source
    required: true
    type: string
  sourceInstanceId:
    name: sourceInstanceId
    in: path
    description: ID of the source
    required: true
    type: string
  transformId:
    name: transformId
    in: path
    description: ID of a transform
    type: integer
    required: true
    format: int64
  transformJobId:
    name: transformJobId
    in: path
    required: true
    description: ID of the transform job
    type: integer
    format: int64
  transformScheduleId:
    name: transformScheduleId
    in: path
    required: true
    description: ID of the transform schedule
    type: integer
    format: int64
paths:
  /api/login:
    post:
      summary: User login
      operationId: loginUser
      tags:
        - Authentication
      description: >
        Authenticate a user and create an authenticated web session. This must
        be called before calling other methods.
      parameters:
        - name: loginParams
          in: body
          description: login object
          required: true
          schema:
            $ref: '#/definitions/login'
      responses:
        '200':
          description: Returns the user data
          schema:
            $ref: '#/definitions/user'
  /api/logout:
    get:
      summary: User log out
      operationId: logoutUser
      tags:
        - Authentication
      description: >
        Closes the authenticated web session. Subsequent API calls will fail
        with code 401 Unauthorized until a new session is created via login.
      responses:
        '200':
          description: Returns a confirmation of the logout
          schema:
            $ref: '#/definitions/logout'
  /api/dataSets:
    get:
      summary: List all data sets
      operationId: findDataSets
      tags:
        - Data Sets
      description: >
        Get a list of data set metadata objects for all data sets the user is
        authorized to see.
      responses:
        '200':
          description: Returns metadata for all data sets the user is authorized to see
          schema:
            type: array
            items:
              $ref: '#/definitions/dataSetMetadata'
    post:
      summary: Create a new data set
      operationId: createDataSet
      tags:
        - Data Sets
      description: >
        Creates a new empty data set.

        Note: This call will fail if there is already a data set with the same
        name as the requested new data set.
      parameters:
        - name: body
          in: body
          description: Data Set object to create
          required: true
          schema:
            $ref: '#/definitions/dataSet'
      responses:
        '201':
          description: Returns the newly created Data Set metadata
          schema:
            $ref: '#/definitions/dataSetMetadata'
  '/api/dataSets/{dataSetId}':
    parameters:
      - $ref: '#/parameters/dataSetId'
    get:
      summary: Get metadata
      description: >
        Get the name, description, record count, and other information about the
        given data set. Does not return any records within the data set.
      operationId: findDataSetById
      tags:
        - Data Sets
      responses:
        '200':
          description: Returns the data set metadata
          schema:
            $ref: '#/definitions/dataSetMetadata'
    put:
      summary: Update data set metadata
      description: |
        Update the data set metadata.
      operationId: updateDataSetById
      tags:
        - Data Sets
      responses:
        '200':
          description: Returns the updated data set metadata.
          schema:
            $ref: '#/definitions/dataSetMetadata'
    delete:
      summary: Delete data set by dataSetId
      description: |
        Delete the data set specified by dataSetId.
      operationId: deleteDataSetById
      tags:
        - Data Sets
      responses:
        '200':
          description: Returns the data set metadata with an updated DELETED dataset name.
          schema:
            $ref: '#/definitions/dataSetMetadata'
  '/api/dataSets/{dataSetId}/attributeNames':
    parameters:
      - $ref: '#/parameters/dataSetId'
    get:
      summary: Get attribute names
      operationId: findDataSetAttributeNames
      tags:
        - Data Sets
      description: >
        Get a list of the names of fields or attributes within a data set. These
        can be used to inform users of what fields are available so they can be
        used in queries.
      responses:
        '200':
          description: Returns all data set attribute names
          schema:
            type: array
            items:
              type: string
  '/api/dataSets/{dataSetId}/attributes':
    parameters:
      - $ref: '#/parameters/dataSetId'
    get:
      summary: Get attribute metadata
      operationId: findDataSetAttributes
      tags:
        - Data Sets
      description: |
        Get the metadata of all attributes of a data set.
      responses:
        '200':
          description: Returns an array of metadata of each attribute of a data set.
          schema:
            type: array
            items:
              $ref: '#/definitions/dataSetAttributes'
  '/api/dataSets/{dataSetId}/clearDataSet':
    parameters:
      - $ref: '#/parameters/dataSetId'
    get:
      summary: Clear a Data Set by id
      operationId: clearDataSetById
      tags:
        - Data Sets
      description: Clears a data set of all data.
      responses:
        '200':
          description: 200 OK
  '/api/dataSets/{dataSetId}/flatSchema':
    parameters:
      - $ref: '#/parameters/dataSetId'
    get:
      summary: Get flat schema metadata.
      operationId: findDataSetFlatSchemaById
      tags:
        - Data Sets
      description: |
        Get flat schema metadata of a data set by data set id.
      responses:
        '200':
          description: Returns an array of the metadata of the flat schema of a data set.
          schema:
            type: object
            properties:
              root:
                type: object
  '/api/dataSets/{dataSetId}/indexingPolicy':
    parameters:
      - $ref: '#/parameters/dataSetId'
    get:
      summary: Get indexing policy metadata
      operationId: findDataSetIndexingPolicyById
      tags:
        - Data Sets
        - Indexing
      description: >
        Get data set indexing policy metadata including indexed fields,
        composite indexes and foreign language indexing by data set id.
      responses:
        '200':
          description: Returns an array of the indexing policy metadata of a data set.
          schema:
            $ref: '#/definitions/dataSetIndexingPolicy'
    put:
      summary: Update indexing policy
      operationId: updateDataSetIndexingPolicyById
      tags:
        - Data Sets
        - Indexing
      parameters:
        - name: dataSetIndexingPolicy
          in: body
          description: The updated data set indexing policy
          required: true
          schema:
            $ref: '#/definitions/dataSetIndexingPolicy'
      description: |
        Updates the indexing policy for a data set by data set id.
      responses:
        '200':
          description: Returns an array of the indexing policy metadata of a data set.
          schema:
            $ref: '#/definitions/dataSetIndexingPolicy'
  '/api/dataSets/{dataSetId}/permissions':
    parameters:
      - $ref: '#/parameters/dataSetId'
    get:
      summary: Get permissions metadata.
      operationId: findDataSetPermissions
      tags:
        - Data Sets
        - Permissions
      description: |
        Get permissions metadata of a data set by data set id.
      responses:
        '200':
          description: Returns an array of metadata of the permissions of a data set.
          schema:
            type: array
            items:
              $ref: '#/definitions/dataSetPermission'
    post:
      summary: Create data set permission
      operationId: createDataSetPermission
      tags:
        - Data Sets
        - Permissions
      parameters:
        - name: dataSetPermission
          in: body
          description: The data set permission to add
          required: true
          schema:
            $ref: '#/definitions/dataSetPermission'
      description: |
        Assigns group permissions to the specified data set.
      responses:
        '201':
          description: Returns an array of metadata of the permissions of a data set.
          schema:
            $ref: '#/definitions/dataSetPermission'
  '/api/dataSets/{dataSetId}/permissions/{permissionId}':
    parameters:
      - $ref: '#/parameters/dataSetId'
      - $ref: '#/parameters/permissionId'
    put:
      summary: Updates a data set permission by id
      operationId: updateDataSetPermissionsById
      tags:
        - Data Sets
        - Permissions
      parameters:
        - name: dataSetPermission
          in: body
          description: The updated data set permission info
          required: true
          schema:
            $ref: '#/definitions/dataSetPermission'
      description: |
        Updates the permissions of a data set speicified by a data set ID.
      responses:
        '200':
          description: Returns the updated data set permission data
          schema:
            $ref: '#/definitions/dataSetPermission'
    delete:
      summary: Deletes a single data set permission based on the id supplied
      operationId: deleteDataSetPermissionsById
      tags:
        - Data Sets
        - Permissions
      description: |
        Deletes a data set permission based on the supplied permission id
      responses:
        '200':
          description: Returns the data set permission that was deleted
          schema:
            $ref: '#/definitions/dataSetPermission'
  '/api/dataSets/{dataSetId}/jobs':
    parameters:
      - $ref: '#/parameters/dataSetId'
    get:
      summary: Get jobs metadata
      operationId: getJobsMetadata
      tags:
        - Data Sets
        - Jobs
      description: |
        Get the metadata of the jobs run on a data set by data set id.
      responses:
        '200':
          description: Returns an array of metadata for all jobs run on a data set.
          schema:
            type: array
            items:
              $ref: '#/definitions/dataSetJob'
  '/api/dataSets/{dataSetId}/records':
    parameters:
      - $ref: '#/parameters/dataSetId'
      - $ref: '#/parameters/recordStyle'
    get:
      summary: Get a sample of record data
      operationId: findDataSetRecordsById
      tags:
        - Data Sets
        - Records
      description: >
        Returns all the fields and values for a sample of records by data set
        id.

        Note: The recordStyle query parameter defaults to a value of "2.1". To
        return json output of record(s), you must specify the recordStyle query
        parameter "2.2".
      responses:
        '200':
          description: Return a sample of records for a data set.
          schema:
            type: object
            properties:
              flatSchema:
                type: boolean
              records:
                type: array
                items:
                  $ref: '#/definitions/record'
  '/api/dataSets/{dataSetId}/schema':
    parameters:
      - $ref: '#/parameters/dataSetId'
    get:
      summary: Get full data set schema metadata.
      operationId: findDataSetSchema
      tags:
        - Data Sets
      description: |
        Get schema metadata of a data set.
      responses:
        '200':
          description: Returns an array of the metadata of the schema for a data set.
          schema:
            type: object
            properties:
              root:
                type: object
  '/api/dataSets/{dataSetId}/repair':
    parameters:
      - $ref: '#/parameters/dataSetId'
    get:
      summary: Repair a Data Set by id
      operationId: repairDataSetById
      tags:
        - Data Sets
      description: Repairs a data set by dataSetId.
      responses:
        '200':
          description: 200 OK
  '/api/dataSets/{dataSetId}/attributes/masking':
    parameters:
      - $ref: '#/parameters/dataSetId'
    put:
      summary: Update attributes masking
      operationId: updateDataSetAttributesMaskingByID
      tags:
        - Data Sets
        - Masking
      description: |
        Updates the masked attributes of a data set.
      parameters:
        - name: attrs
          in: body
          description: Attribute objects
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/dataSetAttributes'
      responses:
        '200':
          description: >-
            Returns the updated list of data set attributes for the specified
            data set.
          schema:
            type: array
            items:
              $ref: '#/definitions/dataSetAttributes'
  /api/importFlows:
    post:
      summary: Creates an import flow
      operationId: addImportFlow
      tags:
        - Import Flows
      parameters:
        - name: importFlow
          in: body
          description: The importFlow to add
          required: true
          schema:
            $ref: '#/definitions/importFlow'
      responses:
        '201':
          description: Returns the newly created import flow
          schema:
            $ref: '#/definitions/importFlow'
  '/api/importFlows/{importFlowId}':
    parameters:
      - $ref: '#/parameters/importFlowIdPath'
    get:
      summary: Returns an import flow by id
      operationId: findImportFlowById
      tags:
        - Import Flows
      responses:
        '200':
          description: Returns the import flow data
          schema:
            $ref: '#/definitions/importFlow'
    delete:
      summary: Deletes an import flow by id
      operationId: deleteImportFlowById
      tags:
        - Import Flows
      responses:
        '200':
          description: Returns the deleted import flow data
          schema:
            $ref: '#/definitions/importFlow'
    put:
      summary: Updates an import flow by id
      operationId: updateImportFlowById
      tags:
        - Import Flows
      parameters:
        - name: importFlow
          in: body
          description: The updated import flow info
          required: true
          schema:
            $ref: '#/definitions/importFlow'
      responses:
        '200':
          description: Returns the updated import flow data
          schema:
            $ref: '#/definitions/importFlow'
  '/api/importFlows/{importFlowId}/execute':
    parameters:
      - $ref: '#/parameters/importFlowIdPath'
    post:
      summary: Runs an import flow by id
      operationId: funImportFlowById
      tags:
        - Import Flows
      responses:
        '200':
          description: Returns the success or failure of running the import flow
          schema:
            type: object
            properties:
              success:
                type: boolean
        '400':
          description: Returns the success or failure of running the import flow
          schema:
            type: object
            properties:
              failureMessage:
                type: string
  '/api/importFlows/{importFlowId}/normalizations':
    parameters:
      - $ref: '#/parameters/importFlowIdPath'
    get:
      description: Returns all normalizations for an importFlow
      summary: Get Import Flow Normalizations
      tags:
        - Import Flows
      operationId: findNormalizations
      responses:
        '200':
          description: Returns the normalizations for an importFlow
          schema:
            type: array
            items:
              $ref: '#/definitions/normalization'
    post:
      description: Creates a new normalizations
      summary: Create Import Flow Normalization
      tags:
        - Import Flows
      operationId: addNormalization
      parameters:
        - name: normalization
          in: body
          description: The normalization to add
          required: true
          schema:
            $ref: '#/definitions/normalization'
      responses:
        '201':
          description: Returns the newly-added normalization
          schema:
            $ref: '#/definitions/normalization'
  '/api/importFlows/{importFlowId}/normalizations/{normalizationId}':
    parameters:
      - $ref: '#/parameters/importFlowIdPath'
      - $ref: '#/parameters/normalizationId'
    get:
      description: Returns a normalization by id
      summary: Get import flow normalization by id
      operationId: findNormalizationById
      tags:
        - Import Flows
      responses:
        '200':
          description: Returns the normalization data
          schema:
            $ref: '#/definitions/normalization'
    put:
      description: Updates a normalization by id
      summary: Update import flow normalization by id
      operationId: updateNormalizationById
      tags:
        - Import Flows
      parameters:
        - name: normalization
          in: body
          description: The updated normalization info
          required: true
          schema:
            $ref: '#/definitions/normalization'
      responses:
        '200':
          description: Returns the updated normalization data
          schema:
            $ref: '#/definitions/normalization'
    delete:
      description: Deletes a single normalization based on the id supplied
      summary: Delete import flow normalization by id
      operationId: deleteNormalization
      tags:
        - Import Flows
      responses:
        '200':
          description: Returns the normalization that was deleted
          schema:
            $ref: '#/definitions/normalization'
  '/api/importFlows/{importFlowId}/schedules':
    parameters:
      - $ref: '#/parameters/importFlowIdPath'
    get:
      summary: Returns all Import Schedules by data flow id
      operationId: findImportSchedules
      tags:
        - Import Flows
        - Schedules
      responses:
        '200':
          description: Returns the matching import schedules
          schema:
            type: array
            items:
              $ref: '#/definitions/importSchedule'
  '/api/importFlows/source/{sourceId}':
    parameters:
      - $ref: '#/parameters/sourceId'
    get:
      summary: Returns all import flows for a given source by id
      operationId: findImportFlowBySourceId
      tags:
        - Import Flows
        - Sources
      responses:
        '200':
          description: Returns the import flow data
          schema:
            $ref: '#/definitions/importFlow'
  '/api/importJobs/{importJobId}/shutdown':
    parameters:
      - $ref: '#/parameters/importJobId'
    get:
      summary: Shutdown an import job
      operationId: shutdownImportJobById
      tags:
        - Jobs
      responses:
        '200':
          description: Returns an updated job
          schema:
            $ref: '#/definitions/dataSetJob'
  /api/importSchedules:
    parameters:
      - $ref: '#/parameters/importFlowId'
    get:
      summary: Returns all Import Schedules by data flow id
      operationId: findImportSchedulesById
      tags:
        - Schedules
      responses:
        '200':
          description: Returns the matching import schedules
          schema:
            type: array
            items:
              $ref: '#/definitions/importSchedule'
    post:
      summary: Creates a new import schedule
      operationId: addImportSchedule
      tags:
        - Schedules
      parameters:
        - name: importSchedule
          in: body
          description: The import schedule to add
          required: true
          schema:
            $ref: '#/definitions/importSchedule'
      responses:
        '201':
          description: Returns the newly-added import schedule
          schema:
            $ref: '#/definitions/importSchedule'
  '/api/importSchedules/{importScheduleId}':
    parameters:
      - $ref: '#/parameters/importScheduleId'
    get:
      summary: Returns an import schedule by id
      operationId: findImportScheduleById
      tags:
        - Schedules
      responses:
        '200':
          description: Returns the import schedule data
          schema:
            $ref: '#/definitions/importSchedule'
    delete:
      summary: Deletes a single import schedule based on the id supplied
      operationId: deleteImportSchedule
      tags:
        - Schedules
      responses:
        '200':
          description: Returns the import schedule that was deleted
          schema:
            $ref: '#/definitions/importSchedule'
  /api/jobs:
    get:
      description: Returns all active jobs
      summary: Get active jobs
      operationId: findActiveJobs
      tags:
        - Jobs
      responses:
        '200':
          description: Returns the active jobs
          schema:
            type: array
            items:
              $ref: '#/definitions/job'
  '/api/jobs/{jobId}/shutdown':
    parameters:
      - $ref: '#/parameters/jobId'
    get:
      summary: Shutdown a job by job id.
      operationId: shutdownJobById
      tags:
        - Jobs
      responses:
        '200':
          description: 200 OK
  '/api/jobs/{jobId}/unblock':
    parameters:
      - $ref: '#/parameters/jobId'
    get:
      summary: Unblocks a job by job id.
      operationId: shutdownImportJob
      tags:
        - Jobs
      responses:
        '200':
          description: 200 OK
  /api/normalizationTypes:
    get:
      summary: Returns all normalization types
      operationId: findNormalizationTypes
      tags:
        - Normalizations
      responses:
        '200':
          description: Returns the matching normalization types
          schema:
            type: array
            items:
              $ref: '#/definitions/normalizationType'
  /api/permissions/dataset:
    get:
      description: Returns the available data set permissions
      summary: Get data set permissions
      operationId: dataSetPermissions
      tags:
        - Data Sets
        - Permissions
      responses:
        '200':
          description: Returns avilable data set permissions.
          schema:
            type: array
            items:
              type: string
  /api/permissions/system:
    get:
      description: Returns the available system permissions
      summary: Get system permissions
      operationId: systemPermissions
      tags:
        - System
        - Permissions
      responses:
        '200':
          description: Returns the users system permissions metadata.
          schema:
            type: array
            items:
              type: string
  /api/records:
    parameters:
      - $ref: '#/parameters/recordId'
    get:
      summary: Get a single record
      operationId: getRecordById
      tags:
        - Records
      parameters:
        - name: datasetId
          type: string
          in: query
          required: true
        - name: recordId
          type: string
          in: query
          required: true
      description: Get a single record by data set id and record id.
      responses:
        '200':
          description: Returns the single record data.
          schema:
            properties:
              flatSchema:
                type: boolean
              records:
                type: array
                items:
                  $ref: '#/definitions/record'
    post:
      summary: Write a single record
      operationId: createRecord
      tags:
        - Records
      description: Writes a single record to the specified data set.
      responses:
        '200':
          description: Returns the single record data.
          schema:
            type: object
            properties:
              flatSchema:
                type: boolean
              records:
                type: array
                items:
                  $ref: '#/definitions/record'
  /api/sinks:
    parameters:
      - name: dataSetId
        in: query
        description: ID of the data set
        required: true
        type: string
    get:
      summary: Returns all sinks by data set id
      operationId: findSinks
      tags:
        - Sinks
      responses:
        '200':
          description: Returns the matching sinks
          schema:
            type: array
            items:
              $ref: '#/definitions/sink'
    post:
      summary: Creates a sink
      operationId: createSink
      tags:
        - Sinks
      parameters:
        - name: sink
          in: body
          description: The sink to add
          required: true
          schema:
            $ref: '#/definitions/sink'
      responses:
        '200':
          description: Returns the new sink data
          schema:
            type: array
            items:
              $ref: '#/definitions/sink'
  '/api/sinks/{sinkId}':
    parameters:
      - $ref: '#/parameters/sinkId'
    get:
      description: Returns a sink by id
      summary: Get sink by id
      operationId: findSinkById
      tags:
        - Sinks
      responses:
        '200':
          description: Returns the sink data
          schema:
            $ref: '#/definitions/sink'
    delete:
      description: >-
        Disables a single sink based on the id supplied. Sinks are not deleted
        for auditing purposes.
      summary: Delete sink by id
      operationId: deleteSinkById
      tags:
        - Sinks
      responses:
        '200':
          description: Returns the sink that was disabled
          schema:
            $ref: '#/definitions/sink'
    put:
      description: Updates a sink by id
      summary: Update sink by id
      operationId: updateSinkById
      tags:
        - Sinks
      parameters:
        - name: sink
          in: body
          description: The updated sink info
          required: true
          schema:
            $ref: '#/definitions/sink'
      responses:
        '200':
          description: Returns the updated sink data
          schema:
            $ref: '#/definitions/sink'
  '/api/sink/{sinkId}/runExport':
    parameters:
      - $ref: '#/parameters/sinkId'
    get:
      summary: Run export by id
      operationId: exportBySinkId
      tags:
        - Sinks
      description: Run an export by the specified id.
      responses:
        '200':
          description: Returns the export job data
          schema:
            $ref: '#/definitions/job'
  /api/sinkSchedules:
    get:
      description: Returns a list Sink Schedules
      summary: Get sink schedules
      operationId: findSinkSchedules
      tags:
        - Sinks
        - Schedules
      responses:
        '200':
          description: Returns the matching sink schedules
          schema:
            type: array
            items:
              $ref: '#/definitions/exportSchedule'
    post:
      description: Creates a new sink schedule
      summary: Create sink schedules
      operationId: createSinkSchedule
      tags:
        - Sinks
        - Schedules
      parameters:
        - name: exportSchedule
          in: body
          description: The sink schedule to add
          required: true
          schema:
            $ref: '#/definitions/exportSchedule'
      responses:
        '201':
          description: Returns the newly-added sink schedule
          schema:
            $ref: '#/definitions/exportSchedule'
  '/api/sinkSchedules/{exportScheduleId}':
    parameters:
      - $ref: '#/parameters/exportScheduleId'
    get:
      description: Returns a sink schedule by id
      summary: Get sink schedule by id
      operationId: findSinkScheduleById
      tags:
        - Sinks
        - Schedules
      responses:
        '200':
          description: Returns the sink schedule data
          schema:
            $ref: '#/definitions/exportSchedule'
    delete:
      description: Deletes a single sink schedule based on the id supplied
      summary: Delete sink schedule by id
      operationId: deleteSinkScheduleById
      tags:
        - Sinks
        - Schedules
      responses:
        '200':
          description: Returns the sink schedule that was deleted
          schema:
            $ref: '#/definitions/exportSchedule'
  /api/sinkTypes:
    get:
      description: Returns all sink types
      summary: Get sink types
      operationId: findSinksTypes
      tags:
        - Sinks
      responses:
        '200':
          description: Returns the matching sink types
          schema:
            type: array
            items:
              $ref: '#/definitions/sinkType'
  '/api/sinkTypes/{sinkTypeId}':
    parameters:
      - $ref: '#/parameters/sinkTypeId'
    get:
      summary: Returns a sink type by id
      operationId: findSinkTypeById
      tags:
        - Sinks
      responses:
        '200':
          description: Returns the sink type data
          schema:
            $ref: '#/definitions/sinkTypeDescription'
  '/api/exportJobs/{exportJobId}/shutdown':
    parameters:
      - $ref: '#/parameters/exportJobId'
    get:
      summary: Shutdown an export job
      operationId: exportJobShutdownById
      tags:
        - Sinks
        - Jobs
      description: |
        Shuts down an existing export job.
      responses:
        '200':
          description: 200 OK
  /api/sourceInstances:
    post:
      summary: Creates a new source
      operationId: addSource
      tags:
        - Sources
      parameters:
        - name: sourceInstance
          in: body
          description: The source to add
          required: true
          schema:
            $ref: '#/definitions/sourceInstance'
      responses:
        '201':
          description: Returns the newly-added source
          schema:
            $ref: '#/definitions/sourceInstance'
          headers:
            Location:
              type: string
              description: The URL of the newly-added source
  '/api/sourceInstances/{sourceInstanceId}':
    parameters:
      - $ref: '#/parameters/sourceInstanceId'
    get:
      summary: Returns a source by id
      operationId: findSourceById
      tags:
        - Sources
      responses:
        '200':
          description: Returns the source data
          schema:
            $ref: '#/definitions/source'
    delete:
      summary: Deletes a single source based on the id supplied
      operationId: deleteSourceById
      tags:
        - Sources
      responses:
        '200':
          description: Returns the source that was deleted
          schema:
            $ref: '#/definitions/source'
    put:
      summary: Updates a source by id
      operationId: updateSourceById
      tags:
        - Sources
      parameters:
        - name: sourceInstance
          in: body
          description: The source to update
          required: true
          schema:
            $ref: '#/definitions/sourceInstance'
      responses:
        '200':
          description: Returns the updated source data
          schema:
            $ref: '#/definitions/sourceInstance'
  /api/sourceTypeDescriptions:
    get:
      summary: Returns all source types
      operationId: findSourceTypes
      tags:
        - Sources
      responses:
        '200':
          description: Returns all source types with metadata
          schema:
            type: array
            items:
              $ref: '#/definitions/sourceTypeDescription'
  '/api/transformJobs/{transformJobId}/shutdown':
    parameters:
      - $ref: '#/parameters/transformJobId'
    get:
      summary: Shutdown a transform job by transform job id.
      operationId: shutdownTransformJobById
      tags:
        - Transforms
        - Jobs
      responses:
        default:
          description: 200 OK
  /api/transforms:
    parameters:
      - name: inputDataSetId
        description: dataSet id to use when filtering transforms by inputs
        required: false
        type: string
        in: query
      - name: outputDataSetId
        description: dataSet id to use when filtering transforms by outputs
        required: false
        type: string
        in: query
    get:
      summary: Returns all transforms for matching data sets.
      description: >-
        Returns all transforms for matching data sets. One of the query
        parameters must be specified
      operationId: findTransforms
      tags:
        - Transforms
      responses:
        '200':
          description: Returns the matching transforms
          schema:
            type: array
            items:
              $ref: '#/definitions/transform'
    post:
      summary: Creates a new transform
      operationId: addTransform
      tags:
        - Transforms
      parameters:
        - name: transform
          in: body
          description: The transform to add
          required: true
          schema:
            $ref: '#/definitions/transform'
      responses:
        '201':
          description: Returns the newly-added transform
          schema:
            $ref: '#/definitions/transform'
          headers:
            Location:
              type: string
              description: The URL of the newly-added transform
  '/api/transforms/{transformId}':
    parameters:
      - $ref: '#/parameters/transformId'
    get:
      summary: Returns a transform by id
      operationId: findTransformById
      tags:
        - Transforms
      responses:
        '200':
          description: Returns the transform data
          schema:
            $ref: '#/definitions/transform'
    delete:
      summary: Deletes a transform based on the id supplied
      operationId: deleteTransformById
      tags:
        - Transforms
      responses:
        '200':
          description: Returns the transform that was deleted
          schema:
            $ref: '#/definitions/transform'
    put:
      summary: Updates a transform by id
      tags:
        - Transforms
      operationId: updateTransformById
      parameters:
        - name: transform
          in: body
          description: The updated transform info
          required: true
          schema:
            $ref: '#/definitions/transform'
      responses:
        '200':
          description: Returns the updated transform data
          schema:
            $ref: '#/definitions/transform'
  '/api/transforms/{transformId}/runTransform':
    parameters:
      - $ref: '#/parameters/transformId'
    get:
      description: Runs the specified transform
      operationId: runTransform
      tags:
        - Transforms
      responses:
        '200':
          description: Returns the success data
          schema:
            $ref: '#/definitions/success'
  '/api/transforms/{transformId}/transformSchedules':
    parameters:
      - $ref: '#/parameters/transformId'
    get:
      description: Returns all Transform Schedules
      operationId: findTransformSchedules
      summary: Get transform schedules
      tags:
        - Transforms
        - Schedules
      responses:
        '200':
          description: Returns the matching transform schedules
          schema:
            type: array
            items:
              $ref: '#/definitions/transformSchedule'
    post:
      description: Creates a new transform schedule
      summary: Create transform schedule
      operationId: addTransformSchedule
      tags:
        - Transforms
        - Schedules
      parameters:
        - name: transformSchedule
          in: body
          description: The transform schedule to add
          required: true
          schema:
            $ref: '#/definitions/transformSchedule'
      responses:
        '201':
          description: Returns the newly-added transform schedule
          schema:
            $ref: '#/definitions/transformSchedule'
  '/api/transforms/{transformId}/transformSchedules/{transformScheduleId}':
    parameters:
      - $ref: '#/parameters/transformId'
      - $ref: '#/parameters/transformScheduleId'
    delete:
      summary: Deletes a single transform schedule based on the id supplied
      operationId: deleteTransformScheduleById
      tags:
        - Transforms
        - Schedules
      responses:
        '200':
          description: Returns the transform schedule that was deleted
          schema:
            $ref: '#/definitions/transformSchedule'
  /api/transformTypes:
    get:
      summary: Returns all transform types
      operationId: findTransformTypes
      tags:
        - Transforms
      responses:
        '200':
          description: Returns the matching transform types
          schema:
            type: array
            items:
              $ref: '#/definitions/transformType'
  '/api/transformTypes/{typeId}':
    parameters:
      - name: typeId
        type: string
        in: path
        description: The transform type id
        required: true
    get:
      summary: Returns a data set transform by id
      operationId: findDataSetTransformById
      tags:
        - Transforms
      responses:
        '200':
          description: Returns the transform type
          schema:
            $ref: '#/definitions/transformType'
  /api/query/:
    get:
      summary: Lucene Syntax
      operationId: queryLucene
      tags:
        - Query
      description: >
        This method is useful for apps that want to allow users to create

        their own queries using Lucene syntax. Queries can be issued for one

        or more data sets simultaneously via the dataSets parameter.


        ### Lucene syntax supported


        Searching for records that contain a term in any field:


        `mary`


        To search for terms that contain spaces, use quotes around the terms:


        `"mary had a"`


        Searching for records that contain a term in a particular field,

        for example, to find records with the term ‘mary’ in the ‘name’ field:


        `name: mary`


        ### Combining Terms


        Searching for records that contain a term in one field and another

        term in another field. This is like requesting records that match

        the first clause, AND the second:


        `name: mary occupation: shepherd`


        Two or more terms may be combined this way. Some terms can be field

        specific and others not. For example:


        `name: mary shepherd`


        would return any records where the value “mary” appeared in the

        name field, and where the value “shepherd” appeared in any other

        field, including the name field.


        Note that the difference between querying for a two-word phrase with

        containing a space and searching for one word within a field and

        one word in any field requires quotes. To search for a two-word

        phrase within a single field, use quotes around the two-word phrase:


        `name: "jane doe" shepherd`


        The preceding query would search for the entire string “jane doe”

        in the name field and the word “shepherd” in any field.


        ### Searching Ranges


        To search for records that contain a value within a range, use

        square brackets and word ‘TO’:


        `height: [60 TO 70]`


        For an open-ended search, use an asterisk, * , to indicate positive

        or negative infinity. The following means return records with a

        value for the height field that is greater than or equal to 60:


        `height: [60 TO *]`


        The following returns all records with a value in the height field

        less than or equal to 60:


        `height: [* TO 60]`


        Searches can also be done across ranges of text values using

        wildcard syntax. Only trailing wildcards are supported. The

        following returns records with a value beginning with the letters

        ‘ma’ in any field:


        `ma*`


        Koverse understands the ordering of several types of values

        including numbers, text strings, dates, and IP addresses:


        `[192.168.1.0 TO 192.168.34.0]`


        To query a range of dates, the following formats are recognized:


        * "yyyyMMdd hh:mm:ss"

        * "EEE MMM d HH:mm:ss Z yyyy"

        * "EEE MMM d HH:mm:ss zzz yyyy"

        * "yyyy-MM-dd"

        * "yyyy-MM"

        * "yyyy/MM/dd HH:mm:ss"

        * "yyyy/MM/dd HH:mm:ss.SSS"

        * "MM/dd/yyyy HH:mm"

        * "ddHHmm'Z' MMM yy"


        Date syntax


        * yyyy - four digit year

        * yy - two digit year

        * MM - two digit month

        * MMM - three letter month

        * dd - two digit day

        * d - one or two digit day

        * HH - two digit hour

        * mm - two digit minute

        * ss - two digit second

        * Z - time zone. such as -0800

        * zzz - time zone. such as Pacific Standard Time; PST; GMT-08:00


        An example of a query for a date range is:


        `creation_date: ["20140211 11:28:08" TO "20140211 13:30:08"]`


        Another example date range is:


        `["2014-02-11" TO "2014-02-12"]`


        Note that a date format such as “20140211” is indistinguishable

        from a simple number, so dashes should be used if a date is meant.


        Searching for records that contain a geographical point value:


        `coordinate: [-60,-40 TO 30,35]`


        Searching a single range does not require that a composite index be

        built. To query multiple ranges at once or a range and other terms,

        a composite index must be built. These types of queries are

        described in the following section.


        For additional information on Composite Indexes, please refer to

        Indexing Policy and Composite Indexes


        ### Combining Ranges


        Koverse supports querying for multiple ranges or ranges and single

        terms simultaneously but requires that composite indexes be built

        first before such queries can be executed. This is because

        composite indexes reduce the work done at query time to just a few

        short scans without having to do any set operations so queries with

        multiple ranges can return quickly, without impacting other users

        of the system.


        An example of a query that combines a range with a single term. To

        perform this query, a composite index of the height and name field

        is required. See Indexing Policy and Composite Indexes for how to

        build this type of index:


        `height: [* TO 10] name: mary`


        An example of a query that combines multiple ranges. To perform

        this query, a composite index of the height and weight field is

        required:


        `height: [* TO 10] weight: [70 TO 80]`


        To query across a range of geos and time simultaneously, do the

        following. To perform this query, a composite index on the geo

        field and time field is required:


        `geo: [-60,-40 TO 30,35] time: ["20140211 11:28:08" TO "20140211
        13:30:08"]`
      parameters:
        - in: query
          name: query
          type: string
          required: true
          description: >
            Lucene syntax query string. See above description for details on
            syntax.
        - in: query
          name: dataSets
          type: string
          required: true
          description: >
            A comma separated list of dataSetIds. Specifying a blank string will
            cause the query to be issued to all data sets the user is allowed to
            query.
        - in: query
          name: auths
          type: string
          required: false
          description: >
            An optional comma separated list of authorization tokens. These are
            used for applying record-level filtering of data set results to
            records that have additional security labels applied.
        - in: query
          name: numRecords
          type: integer
          format: int32
          required: false
          description: |
            The number of records to include in the response.
        - in: query
          name: recordOffset
          type: integer
          format: int64
          required: false
          description: >
            The number of records in the query response to skip. This is used to
            implement paging in applications.
        - in: query
          name: fieldsToReturn
          type: string
          required: false
          description: >
            A comma separated list of field names which can be used to restrict
            the fields included in the response records returned.
      responses:
        '200':
          description: Query results
          schema:
            type: array
            items:
              $ref: '#/definitions/dataSetResult'
  /api/query/object:
    post:
      summary: JSON and data set IDs
      operationId: queryObject
      tags:
        - Query
      description: |
        Query using a JSON document and data set IDs. Object-based Queries
      parameters:
        - $ref: '#/parameters/objectQuery'
      responses:
        '200':
          description: Query results
          schema:
            type: array
            items:
              $ref: '#/definitions/dataSetResult'
  /api/query/object/names:
    post:
      summary: JSON and data set names
      operationId: queryObjectNames
      tags:
        - Query
      description: |
        Query using a JSON document and data set names.
      parameters:
        - $ref: '#/parameters/objectQueryNames'
      responses:
        '200':
          description: Query results
          schema:
            type: array
            items:
              $ref: '#/definitions/dataSetResult'
